# -*- coding: utf-8 -*-
"""LfD Final Project - SVM_Final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13kauHmgsU8X2tK45VaOAgqN_lnavYg8B

# IMPORTS
"""

import argparse
import random
import string
string.punctuation
from metric_utils import calculate_scores
from data_utils import preprocessing, read_corpus
from utils import load_pickle


"""# ARG PARSER"""
def create_arg_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--test_file", default='../../data/test.tsv', type=str,
                        help="Testing file")
    parser.add_argument("--show_plot", action="store_false", default = False,
                        help="Show the confusion matrix plot.")
    parser.add_argument("--best_modelname", type=str, default="best_model.pt",
                        help="To decide whether to give weightage to the less occuring classes or not")

    args = parser.parse_args()
    return args

"""# MODEL"""
def main():
  args = create_arg_parser()
  print(args)
  random.seed(64)
  #get data
  df_test = read_corpus(args.test_file)

  #preprocess data
  df_test['text'] = df_test.text.apply(preprocessing)

  #separate text and labels for training
  X_test, Y_test = df_test.text, df_test.label

  vecname, nvec = load_pickle(f"{args.best_modelname}.vec")
  if "ngram" in vecname or "pos" in vecname:
    # For ngrams, input expected is a list of sentences not splitted sents.
    X_test = [" ".join(doc) for doc in X_test]
  else:
    pass

  nclassifier = load_pickle(args.best_modelname)
  X_test = nvec.transform(X_test).toarray()
  Y_pred = nclassifier.predict(X_test)
  scores, macro_score = calculate_scores(Y_test, Y_pred, showplot = args.show_plot)

  #print results
  print(scores)
  print(f"macro Fscore is {macro_score}")
  print("="*40)

if __name__ == '__main__':
    main()